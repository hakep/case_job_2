# демонстрирую работу методов базового и производного класса.

# создаем базовый класс
# Напишем класс «Карандаш» Pencil,
# который в качестве атрибута хранит цвет карандаша.
# Карандашом можно нарисовать рисунок.

class Pencil:

    def __init__(self, color="серый"):
        self.color = color

    def draw_picture(self):
        return f"Нарисован рисунок цветом '{self.color}'."


# Также напишем класс «Ручка» Pen, который тоже хранит цвет,
# но кроме создания рисунка может ещё и подписать документ,
# если цвет ручки синий, чёрный или фиолетовый.
# Добавил в классе «Ручка» возможность указать тип ручки: шариковая, гелевая, перьевая и т. д.
# И пусть подписать документ можно любой ручкой, кроме гелевой.
# Класс Pen является производным от базового класса Pencil
# За счёт этого я не описывал заново метод draw_picture и он работаet так же, как и в базовом классе.
# а метод __init__ я расширил.
# Атрибут color тоже унаследован из базового класса Pencil.
# Интерпретатор при вызове метода или атрибута сначала ищет их в текущем производном классе.
# Если их нет в текущем классе, происходит поиск в базовом классе.
# Для получения типа ручки нам нужно модифицировать метод __init__, добавив в него аргумент pen_type и сохранив его значение в атрибуте.
# Таким образом, нам нужно дополнить метод базового класса. Такая операция при наследовании называется расширением метода.
# При расширении методов необходимо вначале вызвать метод базового класса с помощью функции super().
# Если этого не сделать, то не будут созданы атрибуты базового класса в производном классе, и это приведёт к ошибке отсутствия атрибутов.

class Pen(Pencil):

    def __init__(self, color, pen_type):
        super().__init__(color=color)
        self.pen_type = pen_type

    def sign_document(self):
        if self.color not in ("синий", "чёрный", "фиолетовый"):
            return f"Ручкой цвета '{self.color}' нельзя подписать документ."
        elif self.pen_type == "гелевая":
            return f"Ручкой типа '{self.pen_type}' нельзя подписать документ."
        return f"Подписан документ."


# создаем объект blue_ball_pen класса Ручка, который является производным от класса Карандаш. И передаем в него некоторые данные
blue_ball_pen = Pen(color="синий", pen_type="шариковая")

# запускаем метод draw_picture() объекта blue_ball_pen, который наследуется классом Ручка от класса Карандаш
# выводим это на экран
print(blue_ball_pen.draw_picture())  # Нарисован рисунок цветом 'синий'.

# запускаем метод sign_document() объекта blue_ball_pen, который определен в классе Ручка
# выводим это на экран
print(blue_ball_pen.sign_document())  # Подписан документ.

# пересоздаем объект blue_ball_pen класса Ручка, который является производным от класса Карандаш. И передаем в него уже другие данные
blue_gel_pen = Pen(color="чёрный", pen_type="гелевая")

# запускаем метод draw_picture() объекта blue_ball_pen, который наследуется классом Ручка от класса Карандаш
# выводим это на экран
print(blue_gel_pen.draw_picture())  # Нарисован рисунок цветом 'чёрный'.

# запускаем метод sign_document() объекта blue_ball_pen, который определен в классе Ручка
# выводим это на экран
# Ручкой типа 'гелевая' нельзя подписать документ.
print(blue_gel_pen.sign_document())
